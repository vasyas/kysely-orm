import { type SelectQueryBuilder, Selectable } from 'kysely';
import { type Model } from './model';
type ColumnSort<Table> = [keyof Table & string, 'ASC' | 'DESC', boolean?];
type SortKeys<Table> = Record<string, ColumnSort<Table>[]>;
type Config<Table, TSortKeys extends SortKeys<Table>> = {
    sortKeys: TSortKeys;
    max?: number;
    limit?: number;
    sortKey?: keyof TSortKeys;
};
export default function cursorable<DB, TableName extends keyof DB & string, IdColumnName extends keyof DB[TableName] & string, TBase extends Model<DB, TableName, IdColumnName>>(Base: TBase, config: Config<DB[TableName], SortKeys<DB[TableName]>>): {
    new (...args: any[]): {};
    getCursorableQuery(options: {
        sortKey?: string | undefined;
        func?: ((qb: SelectQueryBuilder<DB, TableName, {}>) => SelectQueryBuilder<DB, TableName, {}>) | undefined;
        oneMore?: boolean | undefined;
    } & ({
        first?: number | undefined;
        after?: string | undefined;
    } | {
        last?: number | undefined;
        before?: string | undefined;
    })): SelectQueryBuilder<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never, import("kysely/dist/cjs/util/type-utils").MergePartial<Partial<Omit<{}, never>>, Partial<Omit<{}, never>>>>;
    getCursorable(options: {
        sortKey?: string | undefined;
        func?: ((qb: SelectQueryBuilder<DB, TableName, {}>) => SelectQueryBuilder<DB, TableName, {}>) | undefined;
        oneMore?: boolean | undefined;
    } & ({
        first?: number | undefined;
        after?: string | undefined;
    } | {
        last?: number | undefined;
        before?: string | undefined;
    })): Promise<(Partial<Omit<{}, never>> & Partial<Omit<Partial<Omit<{}, never>>, never>> & { [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; } extends infer T ? { [K in keyof T]: (Partial<Omit<{}, never>> & Partial<Omit<Partial<Omit<{}, never>>, never>> & { [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; })[K]; } : never)[]>;
    getLazyCursorableConnection(options: {
        sortKey?: string | undefined;
        func?: ((qb: SelectQueryBuilder<DB, TableName, {}>) => SelectQueryBuilder<DB, TableName, {}>) | undefined;
        oneMore?: boolean | undefined;
    } & ({
        first?: number | undefined;
        after?: string | undefined;
    } | {
        last?: number | undefined;
        before?: string | undefined;
    })): Promise<{
        edges: () => Promise<{
            cursor: string;
            node: Partial<Omit<{}, never>> & Partial<Omit<Partial<Omit<{}, never>>, never>> & { [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; } extends infer T ? { [K in keyof T]: (Partial<Omit<{}, never>> & Partial<Omit<Partial<Omit<{}, never>>, never>> & { [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; })[K]; } : never;
        }[]>;
        pageInfo: {
            hasPreviousPage: () => Promise<boolean>;
            hasNextPage: () => Promise<boolean>;
            startCursor: () => Promise<string>;
            endCursor: () => Promise<string>;
        };
        totalCount: () => Promise<number>;
    }>;
    getCursorableConnection(options: {
        sortKey?: string | undefined;
        func?: ((qb: SelectQueryBuilder<DB, TableName, {}>) => SelectQueryBuilder<DB, TableName, {}>) | undefined;
        oneMore?: boolean | undefined;
    } & ({
        first?: number | undefined;
        after?: string | undefined;
    } | {
        last?: number | undefined;
        before?: string | undefined;
    })): Promise<{
        edges: {
            cursor: string;
            node: Partial<Omit<{}, never>> & Partial<Omit<Partial<Omit<{}, never>>, never>> & { [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; } extends infer T ? { [K in keyof T]: (Partial<Omit<{}, never>> & Partial<Omit<Partial<Omit<{}, never>>, never>> & { [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; })[K]; } : never;
        }[];
        pageInfo: {
            hasPreviousPage: boolean;
            hasNextPage: boolean;
            startCursor: string;
            endCursor: string;
        };
        totalCount: number;
    }>;
    readonly db: import("..").Database<DB>;
    readonly table: TableName;
    readonly id: IdColumnName;
    readonly noResultError: typeof import("kysely").NoResultError;
    isolated: boolean;
    relation<FromColumnName extends keyof DB[TableName] & string, FromReferenceExpression extends `${TableName}.${FromColumnName}`, ToTableName extends keyof DB & string, ToColumnName extends keyof DB[ToTableName] & string>(type: import("../constants/RelationType").default.BelongsToOneRelation | import("../constants/RelationType").default.HasOneRelation | import("../constants/RelationType").default.HasOneThroughRelation, from: FromReferenceExpression, to: `${ToTableName}.${ToColumnName}`): import("../@types/Relation").OneRelation<DB, TableName, FromColumnName, ToTableName, ToColumnName>;
    relation<FromColumnName_1 extends keyof DB[TableName] & string, FromReferenceExpression_1 extends `${TableName}.${FromColumnName_1}`, ToTableName_1 extends keyof DB & string, ToColumnName_1 extends keyof DB[ToTableName_1] & string>(type: import("../constants/RelationType").default.HasManyRelation | import("../constants/RelationType").default.BelongsToManyRelation | import("../constants/RelationType").default.HasManyThroughRelation, from: FromReferenceExpression_1, to: `${ToTableName_1}.${ToColumnName_1}`): import("../@types/Relation").ManyRelation<DB, TableName, FromColumnName_1, ToTableName_1, ToColumnName_1>;
    beforeInsert(data: import("kysely").Insertable<DB[TableName]>): Promise<import("kysely").Insertable<DB[TableName]>>;
    beforeUpdate(data: import("kysely").Updateable<DB[TableName]>): Promise<import("kysely").Updateable<DB[TableName]>>;
    afterInsert(_records: Selectable<DB[TableName]>[]): Promise<void>;
    afterUpdate(_records: Selectable<DB[TableName]>[]): Promise<void>;
    afterUpsert(_records: Selectable<DB[TableName]>[]): Promise<void>;
    transaction<Type>(callback: import("../Database").TransactionCallback<DB, Type>): Promise<Type>;
    readonly dynamic: import("kysely").DynamicModule;
    ref(reference: string): import("kysely/dist/cjs/dynamic/dynamic-reference-builder").DynamicReferenceBuilder<never>;
    readonly fn: import("kysely").FunctionModule<DB, keyof DB>;
    selectFrom(): SelectQueryBuilder<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never, {}>;
    updateTable(): import("kysely").UpdateQueryBuilder<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never, import("kysely").UpdateResult>;
    insertInto(): import("kysely").InsertQueryBuilder<DB, TableName, import("kysely").InsertResult>;
    deleteFrom(): import("kysely").DeleteQueryBuilder<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never, import("kysely").DeleteResult>;
    with<Name extends string, Expression extends import("kysely/dist/cjs/parser/with-parser").CommonTableExpression<DB, Name>>(name: Name, expression: Expression): import("kysely/dist/cjs/parser/with-parser").QueryCreatorWithCommonTableExpression<DB, Name, Expression>;
    find<ColumnName extends keyof DB[TableName] & string>(column: ColumnName, values: readonly import("kysely").SelectType<DB[TableName][ColumnName]>[] | Readonly<import("kysely").SelectType<DB[TableName][ColumnName]>>, func?: ((qb: SelectQueryBuilder<DB, TableName, {}>) => SelectQueryBuilder<DB, TableName, {}>) | undefined): Promise<(import("kysely/dist/cjs/util/type-utils").MergePartial<{ [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }, { [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }> extends infer T_4 ? { [K_3 in keyof T_4]: import("kysely/dist/cjs/util/type-utils").MergePartial<{ [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }, { [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }>[K_3]; } : never)[]>;
    findOne<ColumnName_1 extends keyof DB[TableName] & string>(column: ColumnName_1, value: Readonly<import("kysely").SelectType<DB[TableName][ColumnName_1]>>, func?: ((qb: SelectQueryBuilder<DB, TableName, {}>) => SelectQueryBuilder<DB, TableName, {}>) | undefined): Promise<import("kysely/dist/cjs/util/type-utils").SimplifySingleResult<{ [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }>>;
    findByFields(fields: Readonly<Partial<{ [ColumnName_2 in keyof DB[TableName] & string]: import("kysely").SelectType<DB[TableName][ColumnName_2]> | import("kysely").SelectType<DB[TableName][ColumnName_2]>[]; }>>, func?: ((qb: SelectQueryBuilder<DB, TableName, {}>) => SelectQueryBuilder<DB, TableName, {}>) | undefined): Promise<(import("kysely/dist/cjs/util/type-utils").MergePartial<{ [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }, { [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }> extends infer T_4 ? { [K_3 in keyof T_4]: import("kysely/dist/cjs/util/type-utils").MergePartial<{ [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }, { [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }>[K_3]; } : never)[]>;
    findOneByFields(fields: Readonly<Partial<{ [ColumnName_3 in keyof DB[TableName] & string]: import("kysely").SelectType<DB[TableName][ColumnName_3]>; }>>, func?: ((qb: SelectQueryBuilder<DB, TableName, {}>) => SelectQueryBuilder<DB, TableName, {}>) | undefined): Promise<import("kysely/dist/cjs/util/type-utils").SimplifySingleResult<import("kysely/dist/cjs/util/type-utils").MergePartial<{ [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }, { [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }>>>;
    getOneByFields(fields: Readonly<Partial<{ [ColumnName_4 in keyof DB[TableName] & string]: import("kysely").SelectType<DB[TableName][ColumnName_4]>; }>>, func?: ((qb: SelectQueryBuilder<DB, TableName, {}>) => SelectQueryBuilder<DB, TableName, {}>) | undefined, error?: typeof import("kysely").NoResultError): Promise<import("kysely/dist/cjs/util/type-utils").MergePartial<{ [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }, { [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }> extends infer T_4 ? { [K_3 in keyof T_4]: import("kysely/dist/cjs/util/type-utils").MergePartial<{ [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }, { [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }>[K_3]; } : never>;
    findById(id: Readonly<import("kysely").SelectType<DB[TableName][IdColumnName]>>, func?: ((qb: SelectQueryBuilder<DB, TableName, {}>) => SelectQueryBuilder<DB, TableName, {}>) | undefined): Promise<import("kysely/dist/cjs/util/type-utils").SimplifySingleResult<{ [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }>>;
    findByIds(ids: readonly import("kysely").SelectType<DB[TableName][IdColumnName]>[], func?: ((qb: SelectQueryBuilder<DB, TableName, {}>) => SelectQueryBuilder<DB, TableName, {}>) | undefined): Promise<(import("kysely/dist/cjs/util/type-utils").MergePartial<{ [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }, { [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }> extends infer T_4 ? { [K_3 in keyof T_4]: import("kysely/dist/cjs/util/type-utils").MergePartial<{ [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }, { [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }>[K_3]; } : never)[]>;
    getOne<ColumnName_5 extends keyof DB[TableName] & string>(column: ColumnName_5, value: Readonly<import("kysely").SelectType<DB[TableName][ColumnName_5]>>, func?: ((qb: SelectQueryBuilder<DB, TableName, {}>) => SelectQueryBuilder<DB, TableName, {}>) | undefined, error?: typeof import("kysely").NoResultError): Promise<import("kysely/dist/cjs/util/type-utils").MergePartial<{ [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }, { [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }> extends infer T_4 ? { [K_3 in keyof T_4]: import("kysely/dist/cjs/util/type-utils").MergePartial<{ [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }, { [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }>[K_3]; } : never>;
    getById(id: Readonly<import("kysely").SelectType<DB[TableName][IdColumnName]>>, func?: ((qb: SelectQueryBuilder<DB, TableName, {}>) => SelectQueryBuilder<DB, TableName, {}>) | undefined, error?: typeof import("kysely").NoResultError): Promise<import("kysely/dist/cjs/util/type-utils").MergePartial<{ [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }, { [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }> extends infer T_4 ? { [K_3 in keyof T_4]: import("kysely/dist/cjs/util/type-utils").MergePartial<{ [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }, { [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }>[K_3]; } : never>;
    findOneAndUpdate<ColumnName_6 extends keyof DB[TableName] & string>(column: ColumnName_6, value: Readonly<import("kysely").SelectType<DB[TableName][ColumnName_6]>>, data: Readonly<import("kysely").Updateable<DB[TableName]>>, func?: ((qb: import("kysely").UpdateQueryBuilder<DB, TableName, TableName, import("kysely").UpdateResult>) => import("kysely").UpdateQueryBuilder<DB, TableName, TableName, import("kysely").UpdateResult>) | undefined): Promise<import("kysely/dist/cjs/util/type-utils").SimplifySingleResult<Selectable<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]>>>;
    findByFieldsAndUpdate(fields: Readonly<Partial<{ [ColumnName_7 in keyof DB[TableName] & string]: import("kysely").SelectType<DB[TableName][ColumnName_7]> | import("kysely").SelectType<DB[TableName][ColumnName_7]>[]; }>>, data: Readonly<import("kysely").Updateable<DB[TableName]>>, func?: ((qb: import("kysely").UpdateQueryBuilder<DB, TableName, TableName, import("kysely").UpdateResult>) => import("kysely").UpdateQueryBuilder<DB, TableName, TableName, import("kysely").UpdateResult>) | undefined): Promise<import("kysely/dist/cjs/util/type-utils").SimplifyResult<Selectable<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]>>[]>;
    findOneByFieldsAndUpdate(fields: Readonly<Partial<{ [ColumnName_8 in keyof DB[TableName] & string]: import("kysely").SelectType<DB[TableName][ColumnName_8]> | import("kysely").SelectType<DB[TableName][ColumnName_8]>[]; }>>, data: Readonly<import("kysely").Updateable<DB[TableName]>>, func?: ((qb: import("kysely").UpdateQueryBuilder<DB, TableName, TableName, import("kysely").UpdateResult>) => import("kysely").UpdateQueryBuilder<DB, TableName, TableName, import("kysely").UpdateResult>) | undefined): Promise<import("kysely/dist/cjs/util/type-utils").SimplifySingleResult<Selectable<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]>>>;
    getOneByFieldsAndUpdate(fields: Readonly<Partial<{ [ColumnName_9 in keyof DB[TableName] & string]: import("kysely").SelectType<DB[TableName][ColumnName_9]> | import("kysely").SelectType<DB[TableName][ColumnName_9]>[]; }>>, data: Readonly<import("kysely").Updateable<DB[TableName]>>, func?: ((qb: import("kysely").UpdateQueryBuilder<DB, TableName, TableName, import("kysely").UpdateResult>) => import("kysely").UpdateQueryBuilder<DB, TableName, TableName, import("kysely").UpdateResult>) | undefined, error?: typeof import("kysely").NoResultError): Promise<import("kysely/dist/cjs/util/type-utils").SimplifyResult<Selectable<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]>>>;
    findByIdAndUpdate(id: import("kysely").SelectType<DB[TableName][IdColumnName]>, data: import("kysely").Updateable<DB[TableName]>, func?: ((qb: import("kysely").UpdateQueryBuilder<DB, TableName, TableName, import("kysely").UpdateResult>) => import("kysely").UpdateQueryBuilder<DB, TableName, TableName, import("kysely").UpdateResult>) | undefined): Promise<import("kysely/dist/cjs/util/type-utils").SimplifySingleResult<Selectable<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]>>>;
    getOneAndUpdate<ColumnName_10 extends keyof DB[TableName] & string>(column: ColumnName_10, value: Readonly<import("kysely").SelectType<DB[TableName][ColumnName_10]>>, data: Readonly<import("kysely").Updateable<DB[TableName]>>, func?: ((qb: import("kysely").UpdateQueryBuilder<DB, TableName, TableName, import("kysely").UpdateResult>) => import("kysely").UpdateQueryBuilder<DB, TableName, TableName, import("kysely").UpdateResult>) | undefined, error?: typeof import("kysely").NoResultError): Promise<import("kysely/dist/cjs/util/type-utils").SimplifyResult<Selectable<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]>>>;
    getByIdAndUpdate(id: import("kysely").SelectType<DB[TableName][IdColumnName]>, data: import("kysely").Updateable<DB[TableName]>, func?: ((qb: import("kysely").UpdateQueryBuilder<DB, TableName, TableName, import("kysely").UpdateResult>) => import("kysely").UpdateQueryBuilder<DB, TableName, TableName, import("kysely").UpdateResult>) | undefined, error?: typeof import("kysely").NoResultError): Promise<import("kysely/dist/cjs/util/type-utils").SimplifyResult<Selectable<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]>>>;
    lock<ColumnName_11 extends keyof DB[TableName] & string>(column: ColumnName_11, value: Readonly<import("kysely").SelectType<DB[TableName][ColumnName_11]>>): Promise<import("kysely/dist/cjs/util/type-utils").SimplifySingleResult<{ [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }>>;
    lockById(id: import("kysely").SelectType<DB[TableName][IdColumnName]>): Promise<import("kysely/dist/cjs/util/type-utils").SimplifySingleResult<{ [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }>>;
    insert(values: import("kysely").Insertable<DB[TableName]>, error?: typeof import("kysely").NoResultError): Promise<import("kysely/dist/cjs/util/type-utils").SimplifyResult<Selectable<DB[TableName]>>>;
    upsert(values: import("kysely").Insertable<DB[TableName]>, upsertValues: import("kysely").UpdateObject<import("kysely").OnConflictDatabase<DB, TableName>, import("kysely").OnConflictTables<TableName>, import("kysely").OnConflictTables<TableName>>, conflictColumns: readonly (keyof DB[TableName] & string)[] | Readonly<keyof DB[TableName] & string>, error?: typeof import("kysely").NoResultError): Promise<import("kysely/dist/cjs/util/type-utils").SimplifyResult<Selectable<DB[TableName]>>>;
    insertIfNotExists(values: import("kysely").Insertable<DB[TableName]>, conflictColumns: readonly (keyof DB[TableName] & string)[] | Readonly<keyof DB[TableName] & string>, error?: typeof import("kysely").NoResultError): Promise<import("kysely/dist/cjs/util/type-utils").SimplifyResult<Selectable<DB[TableName]>>>;
    deleteOne<ColumnName_12 extends keyof DB[TableName] & string>(column: ColumnName_12, value: Readonly<import("kysely").SelectType<DB[TableName][ColumnName_12]>>, func?: ((qb: import("kysely").DeleteQueryBuilder<DB, TableName, import("kysely").DeleteResult>) => import("kysely").DeleteQueryBuilder<DB, TableName, import("kysely").DeleteResult>) | undefined, error?: typeof import("kysely").NoResultError): Promise<bigint>;
    deleteOneByFields(fields: Readonly<Partial<{ [ColumnName_13 in keyof DB[TableName] & string]: import("kysely").SelectType<DB[TableName][ColumnName_13]> | import("kysely").SelectType<DB[TableName][ColumnName_13]>[]; }>>, func?: ((qb: import("kysely").DeleteQueryBuilder<DB, TableName, import("kysely").DeleteResult>) => import("kysely").DeleteQueryBuilder<DB, TableName, import("kysely").DeleteResult>) | undefined, error?: typeof import("kysely").NoResultError): Promise<bigint>;
    deleteMany<ColumnName_14 extends keyof DB[TableName] & string>(column: ColumnName_14, values: readonly import("kysely").SelectType<DB[TableName][ColumnName_14]>[], func?: ((qb: import("kysely").DeleteQueryBuilder<DB, TableName, import("kysely").DeleteResult>) => import("kysely").DeleteQueryBuilder<DB, TableName, import("kysely").DeleteResult>) | undefined, error?: typeof import("kysely").NoResultError): Promise<bigint>;
    deleteById(id: import("kysely").SelectType<DB[TableName][IdColumnName]>): Promise<bigint>;
    findByIdAndIncrementQuery(id: Readonly<import("kysely").SelectType<DB[TableName][IdColumnName]>>, columns: Partial<Record<keyof DB[TableName], number>>, func?: ((qb: import("kysely").UpdateQueryBuilder<DB, TableName, TableName, import("kysely").UpdateResult>) => import("kysely").UpdateQueryBuilder<DB, TableName, TableName, import("kysely").UpdateResult>) | undefined): import("kysely").UpdateQueryBuilder<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never, Selectable<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]>>;
    findByIdAndIncrement(id: Readonly<import("kysely").SelectType<DB[TableName][IdColumnName]>>, columns: Partial<Record<keyof DB[TableName], number>>, func?: ((qb: import("kysely").UpdateQueryBuilder<DB, TableName, TableName, import("kysely").UpdateResult>) => import("kysely").UpdateQueryBuilder<DB, TableName, TableName, import("kysely").UpdateResult>) | undefined): Promise<import("kysely/dist/cjs/util/type-utils").SimplifySingleResult<Selectable<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]>>>;
    getByIdAndIncrement(id: Readonly<import("kysely").SelectType<DB[TableName][IdColumnName]>>, columns: Partial<Record<keyof DB[TableName], number>>, func?: ((qb: import("kysely").UpdateQueryBuilder<DB, TableName, TableName, import("kysely").UpdateResult>) => import("kysely").UpdateQueryBuilder<DB, TableName, TableName, import("kysely").UpdateResult>) | undefined, error?: typeof import("kysely").NoResultError): Promise<import("kysely/dist/cjs/util/type-utils").SimplifyResult<Selectable<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]>>>;
    relatedQuery<FromTableName extends TableName, FromColumnName_2 extends keyof DB[TableName] & string, ToTableName_2 extends keyof DB & string, ToColumnName_2 extends keyof DB[ToTableName_2] & string>(relation: import("../@types/Relation").AnyRelation<DB, FromTableName, FromColumnName_2, ToTableName_2, ToColumnName_2>, ids?: Readonly<import("kysely").SelectType<DB[TableName][IdColumnName]>> | Readonly<import("kysely").SelectType<DB[TableName][IdColumnName]>>[]): import("kysely/dist/cjs/parser/select-parser").SelectAllQueryBuilder<import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName>, (FromTableName extends `${string} as ${infer TA}` ? TA : FromTableName extends keyof DB ? FromTableName : FromTableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : FromTableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never) | ((keyof DB | (FromTableName extends `${string} as ${infer TA}` ? TA : FromTableName extends keyof DB ? FromTableName : FromTableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : FromTableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never)) & string), {}, ToTableName_2>;
    findRelatedById<FromTableName_1 extends TableName, FromColumnName_3 extends keyof DB[TableName] & string, ToTableName_3 extends keyof DB & string, ToColumnName_3 extends keyof DB[ToTableName_3] & string>(relation: import("../@types/Relation").OneRelation<DB, FromTableName_1, FromColumnName_3, ToTableName_3, ToColumnName_3>, id: Readonly<import("kysely").SelectType<DB[TableName][IdColumnName]>>, error?: typeof import("kysely").NoResultError | undefined): Promise<Selectable<DB[ToTableName_3]> | undefined>;
    findRelatedById<FromTableName_2 extends TableName, FromColumnName_4 extends keyof DB[TableName] & string, ToTableName_4 extends keyof DB & string, ToColumnName_4 extends keyof DB[ToTableName_4] & string>(relation: import("../@types/Relation").ManyRelation<DB, FromTableName_2, FromColumnName_4, ToTableName_4, ToColumnName_4>, id: Readonly<import("kysely").SelectType<DB[TableName][IdColumnName]>>, error?: typeof import("kysely").NoResultError | undefined): Promise<Selectable<DB[ToTableName_4]>[]>;
    getRelatedById<FromTableName_3 extends TableName, FromColumnName_5 extends keyof DB[TableName] & string, ToTableName_5 extends keyof DB & string, ToColumnName_5 extends keyof DB[ToTableName_5] & string>(relation: import("../@types/Relation").OneRelation<DB, FromTableName_3, FromColumnName_5, ToTableName_5, ToColumnName_5>, id: Readonly<import("kysely").SelectType<DB[TableName][IdColumnName]>>, error?: typeof import("kysely").NoResultError | undefined): Promise<Selectable<DB[ToTableName_5]>>;
    getRelatedById<FromTableName_4 extends TableName, FromColumnName_6 extends keyof DB[TableName] & string, ToTableName_6 extends keyof DB & string, ToColumnName_6 extends keyof DB[ToTableName_6] & string>(relation: import("../@types/Relation").ManyRelation<DB, FromTableName_4, FromColumnName_6, ToTableName_6, ToColumnName_6>, id: Readonly<import("kysely").SelectType<DB[TableName][IdColumnName]>>, error?: typeof import("kysely").NoResultError | undefined): Promise<Selectable<DB[ToTableName_6]>[]>;
    findRelated<FromTableName_5 extends TableName, FromColumnName_7 extends keyof DB[TableName] & string, ToTableName_7 extends keyof DB & string, ToColumnName_7 extends keyof DB[ToTableName_7] & string>(relation: import("../@types/Relation").AnyRelation<DB, FromTableName_5, FromColumnName_7, ToTableName_7, ToColumnName_7>, models: Selectable<DB[TableName]>[]): Promise<({ [K_6 in ({ [C_1 in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>, ToTableName_7>]: { [T_7 in ToTableName_7]: C_1 extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>[T_7] ? import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>[T_7][C_1] : never; }[ToTableName_7]; } extends infer T_6 ? { [K_5 in keyof T_6]: import("kysely").SelectType<{ [C_1 in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>, ToTableName_7>]: { [T_7 in ToTableName_7]: C_1 extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>[T_7] ? import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>[T_7][C_1] : never; }[ToTableName_7]; }[K_5]> extends infer T_8 ? T_8 extends import("kysely").SelectType<{ [C_1 in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>, ToTableName_7>]: { [T_7 in ToTableName_7]: C_1 extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>[T_7] ? import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>[T_7][C_1] : never; }[ToTableName_7]; }[K_5]> ? T_8 extends never ? never : K_5 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>, ToTableName_7>]]: import("kysely").SelectType<{ [C_1 in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>, ToTableName_7>]: { [T_7 in ToTableName_7]: C_1 extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>[T_7] ? import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>[T_7][C_1] : never; }[ToTableName_7]; }[K_6]>; } extends infer T_5 ? { [K_4 in keyof T_5]: { [K_6 in ({ [C_1 in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>, ToTableName_7>]: { [T_7 in ToTableName_7]: C_1 extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>[T_7] ? import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>[T_7][C_1] : never; }[ToTableName_7]; } extends infer T_6 ? { [K_5 in keyof T_6]: import("kysely").SelectType<{ [C_1 in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>, ToTableName_7>]: { [T_7 in ToTableName_7]: C_1 extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>[T_7] ? import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>[T_7][C_1] : never; }[ToTableName_7]; }[K_5]> extends infer T_8 ? T_8 extends import("kysely").SelectType<{ [C_1 in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>, ToTableName_7>]: { [T_7 in ToTableName_7]: C_1 extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>[T_7] ? import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>[T_7][C_1] : never; }[ToTableName_7]; }[K_5]> ? T_8 extends never ? never : K_5 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>, ToTableName_7>]]: import("kysely").SelectType<{ [C_1 in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>, ToTableName_7>]: { [T_7 in ToTableName_7]: C_1 extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>[T_7] ? import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>[T_7][C_1] : never; }[ToTableName_7]; }[K_6]>; }[K_4]; } : never)[]>;
    findRelatedAndCombine<FromTableName_6 extends TableName, FromColumnName_8 extends keyof DB[TableName] & string, ToTableName_8 extends keyof DB & string, ToColumnName_8 extends keyof DB[ToTableName_8] & string, Field extends string>(relation: import("../@types/Relation").OneRelation<DB, FromTableName_6, FromColumnName_8, ToTableName_8, ToColumnName_8>, models: Selectable<DB[TableName]>[], field: Field): Promise<(Selectable<DB[TableName]> & { [key in Field]: Selectable<DB[ToTableName_8]> | undefined; })[]>;
    findRelatedAndCombine<FromTableName_7 extends TableName, FromColumnName_9 extends keyof DB[TableName] & string, ToTableName_9 extends keyof DB & string, ToColumnName_9 extends keyof DB[ToTableName_9] & string, Field_1 extends string>(relation: import("../@types/Relation").ManyRelation<DB, FromTableName_7, FromColumnName_9, ToTableName_9, ToColumnName_9>, models: Selectable<DB[TableName]>[], field: Field_1): Promise<(Selectable<DB[TableName]> & { [key_1 in Field_1]: Selectable<DB[ToTableName_9]>[]; })[]>;
    jsonbIncrement(column: keyof DB[TableName] & string, data: Record<string, number>): import("kysely").RawBuilder<string>;
} & TBase;
export type Cursorable<DB, TableName extends keyof DB & string, IdColumnName extends keyof DB[TableName] & string, TBase extends Model<DB, TableName, IdColumnName>> = ReturnType<typeof cursorable<DB, TableName, IdColumnName, TBase>>;
export {};
