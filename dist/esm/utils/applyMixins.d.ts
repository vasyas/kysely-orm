import { NoResultError } from 'kysely';
import Database from '../Database';
import { type Model } from '../mixins/model';
export default function applyMixins<DB, TableName extends keyof DB & string, IdColumnName extends keyof DB[TableName] & string>(db: Database<DB>, table: TableName, id: IdColumnName, error?: typeof NoResultError): {
    (): {
        new (...args: any[]): {};
        readonly db: Database<DB>;
        readonly table: TableName;
        readonly id: IdColumnName;
        readonly noResultError: typeof NoResultError;
        isolated: boolean;
        relation<FromColumnName extends keyof DB[TableName] & string, FromReferenceExpression extends `${TableName}.${FromColumnName}`, ToTableName extends keyof DB & string, ToColumnName extends keyof DB[ToTableName] & string>(type: import("../constants/RelationType").default.BelongsToOneRelation | import("../constants/RelationType").default.HasOneRelation | import("../constants/RelationType").default.HasOneThroughRelation, from: FromReferenceExpression, to: `${ToTableName}.${ToColumnName}`): import("../@types/Relation").OneRelation<DB, TableName, FromColumnName, ToTableName, ToColumnName>;
        relation<FromColumnName_1 extends keyof DB[TableName] & string, FromReferenceExpression_1 extends `${TableName}.${FromColumnName_1}`, ToTableName_1 extends keyof DB & string, ToColumnName_1 extends keyof DB[ToTableName_1] & string>(type: import("../constants/RelationType").default.HasManyRelation | import("../constants/RelationType").default.BelongsToManyRelation | import("../constants/RelationType").default.HasManyThroughRelation, from: FromReferenceExpression_1, to: `${ToTableName_1}.${ToColumnName_1}`): import("../@types/Relation").ManyRelation<DB, TableName, FromColumnName_1, ToTableName_1, ToColumnName_1>;
        beforeInsert(data: import("kysely").Insertable<DB[TableName]>): Promise<import("kysely").Insertable<DB[TableName]>>;
        beforeUpdate(data: import("kysely").Updateable<DB[TableName]>): Promise<import("kysely").Updateable<DB[TableName]>>;
        afterInsert(_records: import("kysely").Selectable<DB[TableName]>[]): Promise<void>;
        afterUpdate(_records: import("kysely").Selectable<DB[TableName]>[]): Promise<void>;
        afterUpsert(_records: import("kysely").Selectable<DB[TableName]>[]): Promise<void>;
        transaction<Type>(callback: import("../Database").TransactionCallback<DB, Type>): Promise<Type>;
        readonly dynamic: import("kysely").DynamicModule;
        ref(reference: string): import("kysely/dist/cjs/dynamic/dynamic-reference-builder").DynamicReferenceBuilder<never>;
        readonly fn: import("kysely").FunctionModule<DB, keyof DB>;
        selectFrom(): import("kysely").SelectQueryBuilder<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never, {}>;
        updateTable(): import("kysely").UpdateQueryBuilder<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never, import("kysely").UpdateResult>;
        insertInto(): import("kysely").InsertQueryBuilder<DB, TableName, import("kysely").InsertResult>;
        deleteFrom(): import("kysely").DeleteQueryBuilder<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never, import("kysely").DeleteResult>;
        with<Name extends string, Expression extends import("kysely/dist/cjs/parser/with-parser").CommonTableExpression<DB, Name>>(name: Name, expression: Expression): import("kysely/dist/cjs/parser/with-parser").QueryCreatorWithCommonTableExpression<DB, Name, Expression>;
        find<ColumnName extends keyof DB[TableName] & string>(column: ColumnName, values: readonly import("kysely").SelectType<DB[TableName][ColumnName]>[] | Readonly<import("kysely").SelectType<DB[TableName][ColumnName]>>, func?: ((qb: import("kysely").SelectQueryBuilder<DB, TableName, {}>) => import("kysely").SelectQueryBuilder<DB, TableName, {}>) | undefined): Promise<(import("kysely/dist/cjs/util/type-utils").MergePartial<{ [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }, { [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }> extends infer T ? { [K in keyof T]: import("kysely/dist/cjs/util/type-utils").MergePartial<{ [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }, { [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }>[K]; } : never)[]>;
        findOne<ColumnName_1 extends keyof DB[TableName] & string>(column: ColumnName_1, value: Readonly<import("kysely").SelectType<DB[TableName][ColumnName_1]>>, func?: ((qb: import("kysely").SelectQueryBuilder<DB, TableName, {}>) => import("kysely").SelectQueryBuilder<DB, TableName, {}>) | undefined): Promise<import("kysely/dist/cjs/util/type-utils").SimplifySingleResult<import("kysely/dist/cjs/util/type-utils").MergePartial<{ [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }, { [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }>>>;
        findByFields(fields: Readonly<Partial<{ [ColumnName_2 in keyof DB[TableName] & string]: import("kysely").SelectType<DB[TableName][ColumnName_2]> | import("kysely").SelectType<DB[TableName][ColumnName_2]>[]; }>>, func?: ((qb: import("kysely").SelectQueryBuilder<DB, TableName, {}>) => import("kysely").SelectQueryBuilder<DB, TableName, {}>) | undefined): Promise<(import("kysely/dist/cjs/util/type-utils").MergePartial<{ [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }, { [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }> extends infer T ? { [K in keyof T]: import("kysely/dist/cjs/util/type-utils").MergePartial<{ [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }, { [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }>[K]; } : never)[]>;
        findOneByFields(fields: Readonly<Partial<{ [ColumnName_3 in keyof DB[TableName] & string]: import("kysely").SelectType<DB[TableName][ColumnName_3]>; }>>, func?: ((qb: import("kysely").SelectQueryBuilder<DB, TableName, {}>) => import("kysely").SelectQueryBuilder<DB, TableName, {}>) | undefined): Promise<import("kysely/dist/cjs/util/type-utils").SimplifySingleResult<import("kysely/dist/cjs/util/type-utils").MergePartial<{ [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }, { [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }>>>;
        getOneByFields(fields: Readonly<Partial<{ [ColumnName_4 in keyof DB[TableName] & string]: import("kysely").SelectType<DB[TableName][ColumnName_4]>; }>>, func?: ((qb: import("kysely").SelectQueryBuilder<DB, TableName, {}>) => import("kysely").SelectQueryBuilder<DB, TableName, {}>) | undefined, error?: typeof NoResultError): Promise<import("kysely/dist/cjs/util/type-utils").MergePartial<{ [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }, { [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }> extends infer T ? { [K in keyof T]: import("kysely/dist/cjs/util/type-utils").MergePartial<{ [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }, { [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }>[K]; } : never>;
        findById(id: Readonly<import("kysely").SelectType<DB[TableName][IdColumnName]>>, func?: ((qb: import("kysely").SelectQueryBuilder<DB, TableName, {}>) => import("kysely").SelectQueryBuilder<DB, TableName, {}>) | undefined): Promise<import("kysely/dist/cjs/util/type-utils").SimplifySingleResult<import("kysely/dist/cjs/util/type-utils").MergePartial<{ [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }, { [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }>>>;
        findByIds(ids: readonly import("kysely").SelectType<DB[TableName][IdColumnName]>[], func?: ((qb: import("kysely").SelectQueryBuilder<DB, TableName, {}>) => import("kysely").SelectQueryBuilder<DB, TableName, {}>) | undefined): Promise<(import("kysely/dist/cjs/util/type-utils").MergePartial<{ [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }, { [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }> extends infer T ? { [K in keyof T]: import("kysely/dist/cjs/util/type-utils").MergePartial<{ [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }, { [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }>[K]; } : never)[]>;
        getOne<ColumnName_5 extends keyof DB[TableName] & string>(column: ColumnName_5, value: Readonly<import("kysely").SelectType<DB[TableName][ColumnName_5]>>, func?: ((qb: import("kysely").SelectQueryBuilder<DB, TableName, {}>) => import("kysely").SelectQueryBuilder<DB, TableName, {}>) | undefined, error?: typeof NoResultError): Promise<import("kysely/dist/cjs/util/type-utils").MergePartial<{ [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }, { [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }> extends infer T ? { [K in keyof T]: import("kysely/dist/cjs/util/type-utils").MergePartial<{ [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }, { [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }>[K]; } : never>;
        getById(id: Readonly<import("kysely").SelectType<DB[TableName][IdColumnName]>>, func?: ((qb: import("kysely").SelectQueryBuilder<DB, TableName, {}>) => import("kysely").SelectQueryBuilder<DB, TableName, {}>) | undefined, error?: typeof NoResultError): Promise<import("kysely/dist/cjs/util/type-utils").MergePartial<{ [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }, { [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }> extends infer T ? { [K in keyof T]: import("kysely/dist/cjs/util/type-utils").MergePartial<{ [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }, { [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }>[K]; } : never>;
        findOneAndUpdate<ColumnName_6 extends keyof DB[TableName] & string>(column: ColumnName_6, value: Readonly<import("kysely").SelectType<DB[TableName][ColumnName_6]>>, data: Readonly<import("kysely").Updateable<DB[TableName]>>, func?: ((qb: import("kysely").UpdateQueryBuilder<DB, TableName, TableName, import("kysely").UpdateResult>) => import("kysely").UpdateQueryBuilder<DB, TableName, TableName, import("kysely").UpdateResult>) | undefined): Promise<import("kysely/dist/cjs/util/type-utils").SimplifySingleResult<import("kysely").Selectable<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]>>>;
        findByFieldsAndUpdate(fields: Readonly<Partial<{ [ColumnName_7 in keyof DB[TableName] & string]: import("kysely").SelectType<DB[TableName][ColumnName_7]> | import("kysely").SelectType<DB[TableName][ColumnName_7]>[]; }>>, data: Readonly<import("kysely").Updateable<DB[TableName]>>, func?: ((qb: import("kysely").UpdateQueryBuilder<DB, TableName, TableName, import("kysely").UpdateResult>) => import("kysely").UpdateQueryBuilder<DB, TableName, TableName, import("kysely").UpdateResult>) | undefined): Promise<import("kysely/dist/cjs/util/type-utils").SimplifyResult<import("kysely").Selectable<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]>>[]>;
        findOneByFieldsAndUpdate(fields: Readonly<Partial<{ [ColumnName_8 in keyof DB[TableName] & string]: import("kysely").SelectType<DB[TableName][ColumnName_8]> | import("kysely").SelectType<DB[TableName][ColumnName_8]>[]; }>>, data: Readonly<import("kysely").Updateable<DB[TableName]>>, func?: ((qb: import("kysely").UpdateQueryBuilder<DB, TableName, TableName, import("kysely").UpdateResult>) => import("kysely").UpdateQueryBuilder<DB, TableName, TableName, import("kysely").UpdateResult>) | undefined): Promise<import("kysely/dist/cjs/util/type-utils").SimplifySingleResult<import("kysely").Selectable<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]>>>;
        getOneByFieldsAndUpdate(fields: Readonly<Partial<{ [ColumnName_9 in keyof DB[TableName] & string]: import("kysely").SelectType<DB[TableName][ColumnName_9]> | import("kysely").SelectType<DB[TableName][ColumnName_9]>[]; }>>, data: Readonly<import("kysely").Updateable<DB[TableName]>>, func?: ((qb: import("kysely").UpdateQueryBuilder<DB, TableName, TableName, import("kysely").UpdateResult>) => import("kysely").UpdateQueryBuilder<DB, TableName, TableName, import("kysely").UpdateResult>) | undefined, error?: typeof NoResultError): Promise<import("kysely/dist/cjs/util/type-utils").SimplifyResult<import("kysely").Selectable<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]>>>;
        findByIdAndUpdate(id: import("kysely").SelectType<DB[TableName][IdColumnName]>, data: import("kysely").Updateable<DB[TableName]>, func?: ((qb: import("kysely").UpdateQueryBuilder<DB, TableName, TableName, import("kysely").UpdateResult>) => import("kysely").UpdateQueryBuilder<DB, TableName, TableName, import("kysely").UpdateResult>) | undefined): Promise<import("kysely/dist/cjs/util/type-utils").SimplifySingleResult<import("kysely").Selectable<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]>>>;
        getOneAndUpdate<ColumnName_10 extends keyof DB[TableName] & string>(column: ColumnName_10, value: Readonly<import("kysely").SelectType<DB[TableName][ColumnName_10]>>, data: Readonly<import("kysely").Updateable<DB[TableName]>>, func?: ((qb: import("kysely").UpdateQueryBuilder<DB, TableName, TableName, import("kysely").UpdateResult>) => import("kysely").UpdateQueryBuilder<DB, TableName, TableName, import("kysely").UpdateResult>) | undefined, error?: typeof NoResultError): Promise<import("kysely/dist/cjs/util/type-utils").SimplifyResult<import("kysely").Selectable<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]>>>;
        getByIdAndUpdate(id: import("kysely").SelectType<DB[TableName][IdColumnName]>, data: import("kysely").Updateable<DB[TableName]>, func?: ((qb: import("kysely").UpdateQueryBuilder<DB, TableName, TableName, import("kysely").UpdateResult>) => import("kysely").UpdateQueryBuilder<DB, TableName, TableName, import("kysely").UpdateResult>) | undefined, error?: typeof NoResultError): Promise<import("kysely/dist/cjs/util/type-utils").SimplifyResult<import("kysely").Selectable<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]>>>;
        lock<ColumnName_11 extends keyof DB[TableName] & string>(column: ColumnName_11, value: Readonly<import("kysely").SelectType<DB[TableName][ColumnName_11]>>): Promise<import("kysely/dist/cjs/util/type-utils").SimplifySingleResult<{ [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }>>;
        lockById(id: import("kysely").SelectType<DB[TableName][IdColumnName]>): Promise<import("kysely/dist/cjs/util/type-utils").SimplifySingleResult<{ [K_2 in ({ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; } extends infer T_1 ? { [K_1 in keyof T_1]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> extends infer T_3 ? T_3 extends import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_1]> ? T_3 extends never ? never : K_1 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]]: import("kysely").SelectType<{ [C in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never>]: { [T_2 in TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]: C extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2] ? import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[T_2][C] : never; }[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]; }[K_2]>; }>>;
        insert(values: import("kysely").Insertable<DB[TableName]>, error?: typeof NoResultError): Promise<import("kysely/dist/cjs/util/type-utils").SimplifyResult<import("kysely").Selectable<DB[TableName]>>>;
        upsert(values: import("kysely").Insertable<DB[TableName]>, upsertValues: import("kysely").UpdateObject<import("kysely").OnConflictDatabase<DB, TableName>, import("kysely").OnConflictTables<TableName>, import("kysely").OnConflictTables<TableName>>, conflictColumns: readonly (keyof DB[TableName] & string)[] | Readonly<keyof DB[TableName] & string>, error?: typeof NoResultError): Promise<import("kysely/dist/cjs/util/type-utils").SimplifyResult<import("kysely").Selectable<DB[TableName]>>>;
        insertIfNotExists(values: import("kysely").Insertable<DB[TableName]>, conflictColumns: readonly (keyof DB[TableName] & string)[] | Readonly<keyof DB[TableName] & string>, error?: typeof NoResultError): Promise<import("kysely/dist/cjs/util/type-utils").SimplifyResult<import("kysely").Selectable<DB[TableName]>>>;
        deleteOne<ColumnName_12 extends keyof DB[TableName] & string>(column: ColumnName_12, value: Readonly<import("kysely").SelectType<DB[TableName][ColumnName_12]>>, func?: ((qb: import("kysely").DeleteQueryBuilder<DB, TableName, import("kysely").DeleteResult>) => import("kysely").DeleteQueryBuilder<DB, TableName, import("kysely").DeleteResult>) | undefined, error?: typeof NoResultError): Promise<bigint>;
        deleteOneByFields(fields: Readonly<Partial<{ [ColumnName_13 in keyof DB[TableName] & string]: import("kysely").SelectType<DB[TableName][ColumnName_13]> | import("kysely").SelectType<DB[TableName][ColumnName_13]>[]; }>>, func?: ((qb: import("kysely").DeleteQueryBuilder<DB, TableName, import("kysely").DeleteResult>) => import("kysely").DeleteQueryBuilder<DB, TableName, import("kysely").DeleteResult>) | undefined, error?: typeof NoResultError): Promise<bigint>;
        deleteMany<ColumnName_14 extends keyof DB[TableName] & string>(column: ColumnName_14, values: readonly import("kysely").SelectType<DB[TableName][ColumnName_14]>[], func?: ((qb: import("kysely").DeleteQueryBuilder<DB, TableName, import("kysely").DeleteResult>) => import("kysely").DeleteQueryBuilder<DB, TableName, import("kysely").DeleteResult>) | undefined, error?: typeof NoResultError): Promise<bigint>;
        deleteById(id: import("kysely").SelectType<DB[TableName][IdColumnName]>): Promise<bigint>;
        findByIdAndIncrementQuery(id: Readonly<import("kysely").SelectType<DB[TableName][IdColumnName]>>, columns: Partial<Record<keyof DB[TableName], number>>, func?: ((qb: import("kysely").UpdateQueryBuilder<DB, TableName, TableName, import("kysely").UpdateResult>) => import("kysely").UpdateQueryBuilder<DB, TableName, TableName, import("kysely").UpdateResult>) | undefined): import("kysely").UpdateQueryBuilder<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never, TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never, import("kysely").Selectable<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]>>;
        findByIdAndIncrement(id: Readonly<import("kysely").SelectType<DB[TableName][IdColumnName]>>, columns: Partial<Record<keyof DB[TableName], number>>, func?: ((qb: import("kysely").UpdateQueryBuilder<DB, TableName, TableName, import("kysely").UpdateResult>) => import("kysely").UpdateQueryBuilder<DB, TableName, TableName, import("kysely").UpdateResult>) | undefined): Promise<import("kysely/dist/cjs/util/type-utils").SimplifySingleResult<import("kysely").Selectable<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]>>>;
        getByIdAndIncrement(id: Readonly<import("kysely").SelectType<DB[TableName][IdColumnName]>>, columns: Partial<Record<keyof DB[TableName], number>>, func?: ((qb: import("kysely").UpdateQueryBuilder<DB, TableName, TableName, import("kysely").UpdateResult>) => import("kysely").UpdateQueryBuilder<DB, TableName, TableName, import("kysely").UpdateResult>) | undefined, error?: typeof NoResultError): Promise<import("kysely/dist/cjs/util/type-utils").SimplifyResult<import("kysely").Selectable<import("kysely/dist/cjs/parser/table-parser").From<DB, TableName>[TableName extends `${string} as ${infer TA}` ? TA : TableName extends keyof DB ? TableName : TableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : TableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never]>>>;
        relatedQuery<FromTableName extends TableName, FromColumnName_2 extends keyof DB[TableName] & string, ToTableName_2 extends keyof DB & string, ToColumnName_2 extends keyof DB[ToTableName_2] & string>(relation: import("../@types/Relation").AnyRelation<DB, FromTableName, FromColumnName_2, ToTableName_2, ToColumnName_2>, ids?: Readonly<import("kysely").SelectType<DB[TableName][IdColumnName]>> | Readonly<import("kysely").SelectType<DB[TableName][IdColumnName]>>[]): import("kysely/dist/cjs/parser/select-parser").SelectAllQueryBuilder<import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName>, (FromTableName extends `${string} as ${infer TA}` ? TA : FromTableName extends keyof DB ? FromTableName : FromTableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : FromTableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never) | ((keyof DB | (FromTableName extends `${string} as ${infer TA}` ? TA : FromTableName extends keyof DB ? FromTableName : FromTableName extends import("kysely").AliasedExpression<any, infer QA extends string> ? QA : FromTableName extends (qb: any) => import("kysely").AliasedExpression<any, infer QA_1 extends string> ? QA_1 : never)) & string), {}, ToTableName_2>;
        findRelatedById<FromTableName_1 extends TableName, FromColumnName_3 extends keyof DB[TableName] & string, ToTableName_3 extends keyof DB & string, ToColumnName_3 extends keyof DB[ToTableName_3] & string>(relation: import("../@types/Relation").OneRelation<DB, FromTableName_1, FromColumnName_3, ToTableName_3, ToColumnName_3>, id: Readonly<import("kysely").SelectType<DB[TableName][IdColumnName]>>, error?: typeof NoResultError | undefined): Promise<import("kysely").Selectable<DB[ToTableName_3]> | undefined>;
        findRelatedById<FromTableName_2 extends TableName, FromColumnName_4 extends keyof DB[TableName] & string, ToTableName_4 extends keyof DB & string, ToColumnName_4 extends keyof DB[ToTableName_4] & string>(relation: import("../@types/Relation").ManyRelation<DB, FromTableName_2, FromColumnName_4, ToTableName_4, ToColumnName_4>, id: Readonly<import("kysely").SelectType<DB[TableName][IdColumnName]>>, error?: typeof NoResultError | undefined): Promise<import("kysely").Selectable<DB[ToTableName_4]>[]>;
        getRelatedById<FromTableName_3 extends TableName, FromColumnName_5 extends keyof DB[TableName] & string, ToTableName_5 extends keyof DB & string, ToColumnName_5 extends keyof DB[ToTableName_5] & string>(relation: import("../@types/Relation").OneRelation<DB, FromTableName_3, FromColumnName_5, ToTableName_5, ToColumnName_5>, id: Readonly<import("kysely").SelectType<DB[TableName][IdColumnName]>>, error?: typeof NoResultError | undefined): Promise<import("kysely").Selectable<DB[ToTableName_5]>>;
        getRelatedById<FromTableName_4 extends TableName, FromColumnName_6 extends keyof DB[TableName] & string, ToTableName_6 extends keyof DB & string, ToColumnName_6 extends keyof DB[ToTableName_6] & string>(relation: import("../@types/Relation").ManyRelation<DB, FromTableName_4, FromColumnName_6, ToTableName_6, ToColumnName_6>, id: Readonly<import("kysely").SelectType<DB[TableName][IdColumnName]>>, error?: typeof NoResultError | undefined): Promise<import("kysely").Selectable<DB[ToTableName_6]>[]>;
        findRelated<FromTableName_5 extends TableName, FromColumnName_7 extends keyof DB[TableName] & string, ToTableName_7 extends keyof DB & string, ToColumnName_7 extends keyof DB[ToTableName_7] & string>(relation: import("../@types/Relation").AnyRelation<DB, FromTableName_5, FromColumnName_7, ToTableName_7, ToColumnName_7>, models: import("kysely").Selectable<DB[TableName]>[]): Promise<({ [K_5 in ({ [C_1 in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>, ToTableName_7>]: { [T_6 in ToTableName_7]: C_1 extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>[T_6] ? import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>[T_6][C_1] : never; }[ToTableName_7]; } extends infer T_5 ? { [K_4 in keyof T_5]: import("kysely").SelectType<{ [C_1 in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>, ToTableName_7>]: { [T_6 in ToTableName_7]: C_1 extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>[T_6] ? import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>[T_6][C_1] : never; }[ToTableName_7]; }[K_4]> extends infer T_7 ? T_7 extends import("kysely").SelectType<{ [C_1 in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>, ToTableName_7>]: { [T_6 in ToTableName_7]: C_1 extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>[T_6] ? import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>[T_6][C_1] : never; }[ToTableName_7]; }[K_4]> ? T_7 extends never ? never : K_4 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>, ToTableName_7>]]: import("kysely").SelectType<{ [C_1 in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>, ToTableName_7>]: { [T_6 in ToTableName_7]: C_1 extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>[T_6] ? import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>[T_6][C_1] : never; }[ToTableName_7]; }[K_5]>; } extends infer T_4 ? { [K_3 in keyof T_4]: { [K_5 in ({ [C_1 in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>, ToTableName_7>]: { [T_6 in ToTableName_7]: C_1 extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>[T_6] ? import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>[T_6][C_1] : never; }[ToTableName_7]; } extends infer T_5 ? { [K_4 in keyof T_5]: import("kysely").SelectType<{ [C_1 in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>, ToTableName_7>]: { [T_6 in ToTableName_7]: C_1 extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>[T_6] ? import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>[T_6][C_1] : never; }[ToTableName_7]; }[K_4]> extends infer T_7 ? T_7 extends import("kysely").SelectType<{ [C_1 in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>, ToTableName_7>]: { [T_6 in ToTableName_7]: C_1 extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>[T_6] ? import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>[T_6][C_1] : never; }[ToTableName_7]; }[K_4]> ? T_7 extends never ? never : K_4 : never : never; } : never)[import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>, ToTableName_7>]]: import("kysely").SelectType<{ [C_1 in import("kysely").AnyColumn<import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>, ToTableName_7>]: { [T_6 in ToTableName_7]: C_1 extends keyof import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>[T_6] ? import("kysely/dist/cjs/parser/table-parser").From<DB, FromTableName_5>[T_6][C_1] : never; }[ToTableName_7]; }[K_5]>; }[K_3]; } : never)[]>;
        findRelatedAndCombine<FromTableName_6 extends TableName, FromColumnName_8 extends keyof DB[TableName] & string, ToTableName_8 extends keyof DB & string, ToColumnName_8 extends keyof DB[ToTableName_8] & string, Field extends string>(relation: import("../@types/Relation").OneRelation<DB, FromTableName_6, FromColumnName_8, ToTableName_8, ToColumnName_8>, models: import("kysely").Selectable<DB[TableName]>[], field: Field): Promise<(import("kysely").Selectable<DB[TableName]> & { [key in Field]: import("kysely").Selectable<DB[ToTableName_8]> | undefined; })[]>;
        findRelatedAndCombine<FromTableName_7 extends TableName, FromColumnName_9 extends keyof DB[TableName] & string, ToTableName_9 extends keyof DB & string, ToColumnName_9 extends keyof DB[ToTableName_9] & string, Field_1 extends string>(relation: import("../@types/Relation").ManyRelation<DB, FromTableName_7, FromColumnName_9, ToTableName_9, ToColumnName_9>, models: import("kysely").Selectable<DB[TableName]>[], field: Field_1): Promise<(import("kysely").Selectable<DB[TableName]> & { [key_1 in Field_1]: import("kysely").Selectable<DB[ToTableName_9]>[]; })[]>;
        jsonbIncrement(column: keyof DB[TableName] & string, data: Record<string, number>): import("kysely").RawBuilder<string>;
    };
    <T1>(mixin1: (base: Model<DB, TableName, IdColumnName>) => T1): T1;
    <T1_1, T2>(mixin1: (base: Model<DB, TableName, IdColumnName>) => T1_1, mixin2: (base: T1_1) => T2): T2;
    <T1_2, T2_1, T3>(mixin1: (base: Model<DB, TableName, IdColumnName>) => T1_2, mixin2: (base: T1_2) => T2_1, mixin3: (base: T2_1) => T3): T3;
    <T1_3, T2_2, T3_1, T4>(mixin1: (base: Model<DB, TableName, IdColumnName>) => T1_3, mixin2: (base: T1_3) => T2_2, mixin3: (base: T2_2) => T3_1, mixin4: (base: T3_1) => T4): T4;
    <T1_4, T2_3, T3_2, T4_1, T5>(mixin1: (base: Model<DB, TableName, IdColumnName>) => T1_4, mixin2: (base: T1_4) => T2_3, mixin3: (base: T2_3) => T3_2, mixin4: (base: T3_2) => T4_1, mixin5: (base: T4_1) => T5): T5;
    <T1_5, T2_4, T3_3, T4_2, T5_1, T6>(mixin1: (base: Model<DB, TableName, IdColumnName>) => T1_5, mixin2: (base: T1_5) => T2_4, mixin3: (base: T2_4) => T3_3, mixin4: (base: T3_3) => T4_2, mixin5: (base: T4_2) => T5_1, mixin6: (base: T5_1) => T6): T6;
    <T1_6, T2_5, T3_4, T4_3, T5_2, T6_1, T7>(mixin1: (base: Model<DB, TableName, IdColumnName>) => T1_6, mixin2: (base: T1_6) => T2_5, mixin3: (base: T2_5) => T3_4, mixin4: (base: T3_4) => T4_3, mixin5: (base: T4_3) => T5_2, mixin6: (base: T5_2) => T6_1, mixin7: (base: T6_1) => T7): T7;
    <T1_7, T2_6, T3_5, T4_4, T5_3, T6_2, T7_1, T8>(mixin1: (base: Model<DB, TableName, IdColumnName>) => T1_7, mixin2: (base: T1_7) => T2_6, mixin3: (base: T2_6) => T3_5, mixin4: (base: T3_5) => T4_4, mixin5: (base: T4_4) => T5_3, mixin6: (base: T5_3) => T6_2, mixin7: (base: T6_2) => T7_1, mixin8: (base: T7_1) => T8): T8;
    <T1_8, T2_7, T3_6, T4_5, T5_4, T6_3, T7_2, T8_1, T9>(mixin1: (base: Model<DB, TableName, IdColumnName>) => T1_8, mixin2: (base: T1_8) => T2_7, mixin3: (base: T2_7) => T3_6, mixin4: (base: T3_6) => T4_5, mixin5: (base: T4_5) => T5_4, mixin6: (base: T5_4) => T6_3, mixin7: (base: T6_3) => T7_2, mixin8: (base: T7_2) => T8_1, mixin9: (base: T8_1) => T9): T9;
    <T1_9, T2_8, T3_7, T4_6, T5_5, T6_4, T7_3, T8_2, T9_1, T10>(mixin1: (base: Model<DB, TableName, IdColumnName>) => T1_9, mixin2: (base: T1_9) => T2_8, mixin3: (base: T2_8) => T3_7, mixin4: (base: T3_7) => T4_6, mixin5: (base: T4_6) => T5_5, mixin6: (base: T5_5) => T6_4, mixin7: (base: T6_4) => T7_3, mixin8: (base: T7_3) => T8_2, mixin9: (base: T8_2) => T9_1, mixin10: (base: T9_1) => T10): T10;
    <T1_10, T2_9, T3_8, T4_7, T5_6, T6_5, T7_4, T8_3, T9_2, T10_1, T11>(mixin1: (base: Model<DB, TableName, IdColumnName>) => T1_10, mixin2: (base: T1_10) => T2_9, mixin3: (base: T2_9) => T3_8, mixin4: (base: T3_8) => T4_7, mixin5: (base: T4_7) => T5_6, mixin6: (base: T5_6) => T6_5, mixin7: (base: T6_5) => T7_4, mixin8: (base: T7_4) => T8_3, mixin9: (base: T8_3) => T9_2, mixin10: (base: T9_2) => T10_1, mixin11: (base: T10_1) => T11): T11;
    <T1_11, T2_10, T3_9, T4_8, T5_7, T6_6, T7_5, T8_4, T9_3, T10_2, T11_1, T12>(mixin1: (base: Model<DB, TableName, IdColumnName>) => T1_11, mixin2: (base: T1_11) => T2_10, mixin3: (base: T2_10) => T3_9, mixin4: (base: T3_9) => T4_8, mixin5: (base: T4_8) => T5_7, mixin6: (base: T5_7) => T6_6, mixin7: (base: T6_6) => T7_5, mixin8: (base: T7_5) => T8_4, mixin9: (base: T8_4) => T9_3, mixin10: (base: T9_3) => T10_2, mixin11: (base: T10_2) => T11_1, mixin12: (base: T11_1) => T12): T12;
    <T1_12, T2_11, T3_10, T4_9, T5_8, T6_7, T7_6, T8_5, T9_4, T10_3, T11_2, T12_1, T13>(mixin1: (base: Model<DB, TableName, IdColumnName>) => T1_12, mixin2: (base: T1_12) => T2_11, mixin3: (base: T2_11) => T3_10, mixin4: (base: T3_10) => T4_9, mixin5: (base: T4_9) => T5_8, mixin6: (base: T5_8) => T6_7, mixin7: (base: T6_7) => T7_6, mixin8: (base: T7_6) => T8_5, mixin9: (base: T8_5) => T9_4, mixin10: (base: T9_4) => T10_3, mixin11: (base: T10_3) => T11_2, mixin12: (base: T11_2) => T12_1, mixin13: (base: T12_1) => T13): T13;
};
